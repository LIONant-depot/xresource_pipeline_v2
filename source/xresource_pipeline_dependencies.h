namespace xresource_pipeline
{
    struct dependencies
    {
        std::vector<xresource::full_guid>       m_Resources;                // Reference to a user created resource. EX: MaterialInstance to Material, Material
        std::vector<xresource::full_guid>       m_VirtualResources;         // Ex: A font resource may have: Virtual SpritePackage Resource, which in turn may have a Texture Resource
        std::vector<std::string>                m_Assets;                   // Things like PNG, FBX, etc...
        std::vector<std::string>                m_VirtualAssets;            // Virtual assets are asset generated by compilers which other resources could reference.

        xcore::err Serialize(bool isReading, std::string_view Name, xproperty::settings::context& Context) noexcept
        {
            xcore::textfile::stream Stream;
            if (auto Err = Stream.Open(isReading, Name, xcore::textfile::file_type::TEXT); Err)
                return Err;

            if (auto Err = xproperty::sprop::serializer::Stream<xproperty::settings::atomic_types_tuple>(Stream, *this, Context); Err)
                return Err;

            return {};
        }

        constexpr bool hasDependencies( void ) const noexcept
        {
            return m_Resources.size() || m_VirtualResources.size() || m_Assets.size() || m_VirtualAssets.size();
        }

        void clear( void )
        {
            m_Resources.clear();
            m_VirtualResources.clear();
            m_Assets.clear();
            m_VirtualAssets.clear();
        }

        XPROPERTY_DEF
        ( "depedencies", dependencies
        , obj_member<"Resources",           &dependencies::m_Resources>
        , obj_member<"VirtualResources",    &dependencies::m_VirtualResources >
        , obj_member<"Assets",              &dependencies::m_Assets>
        , obj_member<"VirtualAssets",       &dependencies::m_VirtualAssets>
        )
    };
    XPROPERTY_REG(dependencies)
}
